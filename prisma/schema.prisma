generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model activities {
  id             Int      @id @default(autoincrement())
  to_do_end_line DateTime @default(now())
  activities     String
  career         String?
  user_id        Int?
  users          users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  images         images[]
}

model announcements {
  id      Int      @id @default(autoincrement())
  text    String
  date    DateTime @default(now())
  name    String
  user_id Int?
  users   users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  images  images[]
}

model answers {
  id         Int       @id @default(autoincrement())
  text       String
  date       DateTime  @default(now())
  user_id    Int?
  message_id Int?
  messages   messages? @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  images     images[]
}

model images {
  id              Int            @id @default(autoincrement())
  url             String
  answer_id       Int?
  announcement_id Int?
  activity_id     Int?
  activities      activities?    @relation(fields: [activity_id], references: [id], onUpdate: NoAction)
  announcements   announcements? @relation(fields: [announcement_id], references: [id], onUpdate: NoAction)
  answers         answers?       @relation(fields: [answer_id], references: [id], onUpdate: NoAction)
}

model likes {
  id            Int             @id @default(autoincrement())
  user_id       Int?
  message_id    Int?
  created_at    DateTime        @default(now())
  messages      messages?       @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications notifications[]
}

model messages {
  id            Int             @id @default(autoincrement())
  text          String
  date          DateTime        @default(now())
  is_bot        Boolean?        @default(false)
  user_id       Int?
  answers       answers[]
  likes         likes[]
  users         users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications notifications[]
}

model notifications {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  like_id    Int?
  message_id Int?
  date       DateTime  @default(now())
  seen       Boolean?  @default(false)
  likes      likes?    @relation(fields: [like_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages   messages? @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            Int             @id @default(autoincrement())
  password      String
  name          String          @unique
  email         String          @unique
  major         String?
  role          String?
  status        String?
  created_at    DateTime        @default(now())
  activities    activities[]
  announcements announcements[]
  answers       answers[]
  likes         likes[]
  messages      messages[]
  notifications notifications[]
}
